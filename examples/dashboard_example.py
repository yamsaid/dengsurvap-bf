"""
Exemple de g√©n√©ration de tableau de bord √©pid√©miologique

Ce script montre comment g√©n√©rer un tableau de bord complet
avec des analyses √©pid√©miologiques avanc√©es.
"""

import os
from datetime import datetime, timedelta
from dengsurvab import AppiClient, DashboardGenerator


def generate_epidemiological_dashboard():
    """G√©n√®re un tableau de bord √©pid√©miologique complet."""
    
    print("=== Tableau de Bord √âpid√©miologique - Appi Dengue ===\n")
    
    # Configuration du client
    base_url = os.getenv('APPI_API_URL', 'https://votre-api-appi.com')
    api_key = os.getenv('APPI_API_KEY', 'votre-cl√©-api')
    
    client = AppiClient(base_url=base_url, api_key=api_key)
    dashboard = DashboardGenerator(client)
    
    # P√©riode d'analyse (derniers 3 mois)
    end_date = datetime.now().date()
    start_date = end_date - timedelta(days=90)
    
    print(f"üìÖ P√©riode d'analyse: {start_date} √† {end_date}")
    print(f"üìä G√©n√©ration du tableau de bord...\n")
    
    try:
        # G√©n√©rer le rapport complet
        report = dashboard.generate_report(
            date_debut=start_date.strftime("%Y-%m-%d"),
            date_fin=end_date.strftime("%Y-%m-%d"),
            region="Toutes",
            district="Toutes",
            include_visualizations=True
        )
        
        # Afficher le r√©sum√©
        print("üìã R√âSUM√â EX√âCUTIF")
        print("=" * 50)
        summary = report['summary']
        print(f"Total cas: {summary['total_cas']:,}")
        print(f"Cas positifs: {summary['total_positifs']:,}")
        print(f"Hospitalisations: {summary['total_hospitalisations']:,}")
        print(f"D√©c√®s: {summary['total_deces']:,}")
        
        # Afficher les taux
        print("\nüìà INDICATEURS √âPID√âMIOLOGIQUES")
        print("=" * 50)
        rates = report['rates']
        print(f"Taux de positivit√©: {rates.get('taux_positivite', 0):.1f}%")
        print(f"Taux d'hospitalisation: {rates.get('taux_hospitalisation', 0):.1f}%")
        print(f"Taux de l√©talit√©: {rates.get('taux_letalite', 0):.1f}%")
        
        # Afficher l'analyse des tendances
        print("\nüìä ANALYSE DES TENDANCES")
        print("=" * 50)
        trend = report['trend_analysis']
        if trend:
            print(f"Direction de la tendance: {trend.get('trend_direction', 'N/A')}")
            print(f"Pente: {trend.get('slope', 0):.2f}")
            print(f"Pente (%): {trend.get('slope_percentage', 0):.1f}%")
            print(f"Coefficient de corr√©lation: {trend.get('correlation', 0):.3f}")
        
        # Afficher l'analyse saisonni√®re
        print("\nüå°Ô∏è ANALYSE SAISONNI√àRE")
        print("=" * 50)
        seasonal = report['seasonal_analysis']
        if seasonal:
            print(f"Mois de pic: {seasonal.get('peak_month', 'N/A')}")
            print(f"Mois de creux: {seasonal.get('trough_month', 'N/A')}")
            print(f"Amplitude saisonni√®re: {seasonal.get('seasonal_amplitude', 0):.1f}")
        
        # Afficher les pr√©dictions
        print("\nüîÆ PR√âDICTIONS")
        print("=" * 50)
        forecast = report['forecast']
        if forecast:
            print(f"Pr√©diction semaine suivante: {forecast.get('prediction', 0):.0f} cas")
            print(f"Intervalle de confiance: [{forecast.get('confidence_interval_lower', 0):.0f}, {forecast.get('confidence_interval_upper', 0):.0f}]")
            print(f"M√©thode utilis√©e: {forecast.get('method', 'N/A')}")
        
        # Afficher les anomalies
        print("\nüö® ANOMALIES D√âTECT√âES")
        print("=" * 50)
        anomalies = report['anomalies']
        print(f"Nombre d'anomalies: {anomalies['count']}")
        
        if anomalies['periods']:
            print("P√©riodes avec anomalies:")
            for period in anomalies['periods'][:3]:  # Afficher les 3 premi√®res
                print(f"  - {period['date_debut']} √† {period['date_fin']}: {period['total_cas']} cas")
        
        # Sauvegarder le rapport
        print("\nüíæ SAUVEGARDE DU RAPPORT")
        print("=" * 50)
        report_file = f"rapport_epidemiologique_{end_date.strftime('%Y%m%d')}.json"
        if dashboard.save_report(report, report_file):
            print(f"‚úÖ Rapport sauvegard√© dans '{report_file}'")
        else:
            print("‚ùå Erreur lors de la sauvegarde")
        
        # G√©n√©rer des visualisations (si matplotlib est disponible)
        try:
            import matplotlib.pyplot as plt
            generate_visualizations(report, end_date)
        except ImportError:
            print("üìä Matplotlib non disponible - visualisations ignor√©es")
        
        print("\n‚úÖ Tableau de bord g√©n√©r√© avec succ√®s!")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration du tableau de bord: {e}")


def generate_visualizations(report, end_date):
    """G√©n√®re des visualisations pour le tableau de bord."""
    
    print("\nüìä G√âN√âRATION DES VISUALISATIONS")
    print("=" * 50)
    
    try:
        import matplotlib.pyplot as plt
        import pandas as pd
        
        # Cr√©er un DataFrame √† partir des donn√©es
        data = pd.DataFrame(report['data'])
        if data.empty:
            print("Aucune donn√©e disponible pour les visualisations")
            return
        
        # Convertir les dates
        data['date_debut'] = pd.to_datetime(data['date_debut'])
        
        # Cr√©er une figure avec plusieurs sous-graphiques
        fig, axes = plt.subplots(2, 2, figsize=(15, 10))
        fig.suptitle(f'Tableau de Bord √âpid√©miologique - {end_date}', fontsize=16)
        
        # 1. √âvolution temporelle des cas
        axes[0, 0].plot(data['date_debut'], data['total_cas'], 'b-', linewidth=2)
        axes[0, 0].set_title('√âvolution des cas de dengue')
        axes[0, 0].set_ylabel('Nombre de cas')
        axes[0, 0].grid(True, alpha=0.3)
        
        # 2. Taux de positivit√©
        axes[0, 1].plot(data['date_debut'], data['taux_positivite'], 'r-', linewidth=2)
        axes[0, 1].set_title('Taux de positivit√©')
        axes[0, 1].set_ylabel('Taux (%)')
        axes[0, 1].grid(True, alpha=0.3)
        
        # 3. Hospitalisations vs d√©c√®s
        axes[1, 0].bar(data['date_debut'], data['hospitalisations'], alpha=0.7, label='Hospitalisations')
        axes[1, 0].bar(data['date_debut'], data['deces'], alpha=0.7, label='D√©c√®s')
        axes[1, 0].set_title('Hospitalisations et d√©c√®s')
        axes[1, 0].set_ylabel('Nombre')
        axes[1, 0].legend()
        axes[1, 0].grid(True, alpha=0.3)
        
        # 4. Taux d'hospitalisation
        axes[1, 1].plot(data['date_debut'], data['taux_hospitalisation'], 'g-', linewidth=2)
        axes[1, 1].set_title('Taux d\'hospitalisation')
        axes[1, 1].set_ylabel('Taux (%)')
        axes[1, 1].grid(True, alpha=0.3)
        
        # Ajuster la mise en page
        plt.tight_layout()
        
        # Sauvegarder la figure
        plot_file = f"dashboard_visualization_{end_date.strftime('%Y%m%d')}.png"
        plt.savefig(plot_file, dpi=300, bbox_inches='tight')
        print(f"‚úÖ Visualisations sauvegard√©es dans '{plot_file}'")
        
        # Afficher la figure
        plt.show()
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration des visualisations: {e}")


def generate_alert_report():
    """G√©n√®re un rapport d'alertes."""
    
    print("\nüö® RAPPORT D'ALERTES")
    print("=" * 50)
    
    base_url = os.getenv('APPI_API_URL', 'https://votre-api-appi.com')
    api_key = os.getenv('APPI_API_KEY', 'votre-cl√©-api')
    
    client = AppiClient(base_url=base_url, api_key=api_key)
    
    try:
        # R√©cup√©rer les alertes critiques
        alertes_critiques = client.get_alertes_critiques(limit=10)
        print(f"Alertes critiques: {len(alertes_critiques)}")
        
        for alerte in alertes_critiques[:5]:
            print(f"  - {alerte.created_at}: {alerte.message}")
        
        # R√©cup√©rer les alertes actives
        alertes_actives = client.get_alertes_actives(limit=10)
        print(f"\nAlertes actives: {len(alertes_actives)}")
        
        for alerte in alertes_actives[:5]:
            print(f"  - {alerte.severity}: {alerte.message}")
        
        # V√©rifier les alertes
        print("\nüîç V√©rification des alertes...")
        verification = client.verifier_alertes(
            date_debut=(datetime.now().date() - timedelta(days=7)).strftime("%Y-%m-%d"),
            date_fin=datetime.now().date().strftime("%Y-%m-%d")
        )
        
        print(f"V√©rification termin√©e: {verification.get('status', 'N/A')}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration du rapport d'alertes: {e}")


if __name__ == "__main__":
    # G√©n√©rer le tableau de bord principal
    generate_epidemiological_dashboard()
    
    # G√©n√©rer le rapport d'alertes
    generate_alert_report()
    
    print("\nüéâ G√©n√©ration des rapports termin√©e!")
    print("üìä Consultez les fichiers g√©n√©r√©s pour plus de d√©tails.") 