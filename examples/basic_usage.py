"""
Exemple d'utilisation de base du client Appi Dengue

Ce script montre comment utiliser les fonctionnalit√©s principales
du client pour acc√©der aux donn√©es de surveillance de la dengue.
"""
# dengsurvap-bf # Dengue Surveillance API for Burkina Faso
# pip install dengsurvap-bf
# Importation des biblioth√®ques n√©cessaires
import os
from datetime import datetime, timedelta
from dengsurvab import AppiClient

# Fonction principale
def main():
    """Exemple principal d'utilisation du client."""
    
    # Configuration du client
    # Vous pouvez utiliser des variables d'environnement ou configurer directement
    base_url = os.getenv('APPI_API_URL', 'https://votre-api-appi.com')
    api_key = os.getenv('APPI_API_KEY', 'votre-cl√©-api')
    
    print("=== Client Appi Dengue - Exemple d'utilisation ===\n")
    
    # Initialisation du client
    print("1. Initialisation du client...")
    client = AppiClient(
        base_url=base_url,
        api_key=api_key,
        debug=True  # Activer les logs d√©taill√©s
    )
    
    # Authentification (optionnelle si vous avez une cl√© API)
    print("\n2. Authentification...")
    try:
        # Remplacez par vos identifiants
        auth_result = client.authenticate("votre-email@example.com", "votre-mot-de-passe")
        print(f"‚úÖ Authentification r√©ussie pour {auth_result.get('user', {}).get('email', 'N/A')}")
    except Exception as e:
        print(f"‚ö†Ô∏è  Authentification √©chou√©e: {e}")
        print("Continuing without authentication...")
    
    # R√©cup√©ration des statistiques g√©n√©rales
    print("\n3. R√©cup√©ration des statistiques...")
    try:
        stats = client.get_stats()
        print(f"üìä Statistiques g√©n√©rales:")
        print(f"   - Total cas: {stats.total_cas}")
        print(f"   - Cas positifs: {stats.total_positifs}")
        print(f"   - Hospitalisations: {stats.total_hospitalisations}")
        print(f"   - D√©c√®s: {stats.total_deces}")
        print(f"   - R√©gions actives: {len(stats.regions_actives)}")
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des statistiques: {e}")
    
    # R√©cup√©ration des r√©gions et districts
    print("\n4. R√©cup√©ration des r√©gions et districts...")
    try:
        regions = client.get_regions()
        print(f"üèõÔ∏è  R√©gions disponibles: {regions}")
        
        if regions:
            districts = client.get_districts(region=regions[0])
            print(f"üìç Districts de {regions[0]}: {districts[:5]}...")  # Afficher les 5 premiers
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des r√©gions: {e}")
    
    # R√©cup√©ration des cas de dengue
    print("\n5. R√©cup√©ration des cas de dengue...")
    try:
        # Date de la derni√®re semaine
        end_date = datetime.now().date()
        start_date = end_date - timedelta(days=7)
        
        cas = client.get_cas_dengue(
            annee=2024,
            mois=1,
            region="Centre"
        )
        
        print(f"ü¶ü Cas de dengue r√©cup√©r√©s: {len(cas)}")
        if cas:
            print(f"   Premier cas: {cas[0].date_consultation} - {cas[0].region}")
            print(f"   Dernier cas: {cas[-1].date_consultation} - {cas[-1].region}")
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des cas: {e}")
    
    # R√©cup√©ration des indicateurs hebdomadaires
    print("\n6. R√©cup√©ration des indicateurs hebdomadaires...")
    try:
        indicateurs = client.data_period(
            date_debut=start_date.strftime("%Y-%m-%d"),
            date_fin=end_date.strftime("%Y-%m-%d"),
            region="Toutes"
        )
        
        print(f"üìà Indicateurs hebdomadaires r√©cup√©r√©s: {len(indicateurs)}")
        if indicateurs:
            latest = indicateurs[-1]
            print(f"   Derni√®re semaine: {latest.date_debut} - {latest.date_fin}")
            print(f"   Total cas: {latest.total_cas}")
            print(f"   Taux positivit√©: {latest.taux_positivite:.1f}%")
            print(f"   Taux hospitalisation: {latest.taux_hospitalisation:.1f}%")
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des indicateurs: {e}")
    
    # R√©cup√©ration des alertes
    print("\n7. R√©cup√©ration des alertes...")
    try:
        alertes = client.get_alertes(limit=5)
        print(f"üö® Alertes r√©cup√©r√©es: {len(alertes)}")
        
        for alerte in alertes[:3]:  # Afficher les 3 premi√®res
            print(f"   - {alerte.severity}: {alerte.message}")
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des alertes: {e}")
    
    # Export de donn√©es
    print("\n8. Export de donn√©es...")
    try:
        # Export au format CSV
        csv_data = client.export_data(
            format="csv",
            date_debut=start_date.strftime("%Y-%m-%d"),
            date_fin=end_date.strftime("%Y-%m-%d"),
            limit=100
        )
        
        # Sauvegarder le fichier
        with open("donnees_dengue.csv", "wb") as f:
            f.write(csv_data)
        
        print(f"üíæ Donn√©es export√©es dans 'donnees_dengue.csv' ({len(csv_data)} bytes)")
    except Exception as e:
        print(f"‚ùå Erreur lors de l'export: {e}")
    
    # Analyse √©pid√©miologique
    print("\n9. Analyse √©pid√©miologique...")
    try:
        # R√©cup√©rer une s√©rie temporelle
        series = client.get_time_series(
            date_debut=(end_date - timedelta(days=30)).strftime("%Y-%m-%d"),
            date_fin=end_date.strftime("%Y-%m-%d"),
            region="Toutes"
        )
        
        print(f"üìä S√©rie temporelle g√©n√©r√©e: {len(series)} points")
        
        # Calculer les taux
        rates = client.calculate_rates(
            date_debut=(end_date - timedelta(days=30)).strftime("%Y-%m-%d"),
            date_fin=end_date.strftime("%Y-%m-%d")
        )
        
        print(f"üìà Taux calcul√©s:")
        print(f"   - Positivit√©: {rates.get('taux_positivite', 0):.1f}%")
        print(f"   - Hospitalisation: {rates.get('taux_hospitalisation', 0):.1f}%")
        print(f"   - L√©talit√©: {rates.get('taux_letalite', 0):.1f}%")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'analyse: {e}")
    
    # Configuration des alertes
    print("\n10. Configuration des alertes...")
    try:
        # Configurer les seuils d'alerte
        config_result = client.configurer_seuils(
            seuil_positivite=15,
            seuil_hospitalisation=10,
            seuil_deces=5
        )
        
        print("‚úÖ Seuils d'alerte configur√©s")
        print(f"   - Seuil positivit√©: 15%")
        print(f"   - Seuil hospitalisation: 10%")
        print(f"   - Seuil d√©c√®s: 5%")
    except Exception as e:
        print(f"‚ùå Erreur lors de la configuration des alertes: {e}")
    
    print("\n=== Exemple termin√© ===")
    print("üìö Consultez la documentation pour plus d'exemples et de fonctionnalit√©s.")


if __name__ == "__main__":
    main() 