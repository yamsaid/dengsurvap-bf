"""
Interface en ligne de commande pour le client Appi Dengue

Ce module fournit une interface CLI simple pour utiliser le client.
"""

import argparse
import sys
import os
import pandas as pd
from datetime import datetime, timedelta
from typing import Optional

from . import AppiClient


def main():
    """Point d'entr√©e principal du CLI."""
    parser = argparse.ArgumentParser(
        description="Client CLI pour l'API de surveillance de la dengue Appi",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples d'utilisation:
  %(prog)s stats
  %(prog)s cas --date-debut 2024-01-01 --date-fin 2024-01-31
  %(prog)s alertes --severity critical
  %(prog)s export --format csv --output donnees.csv
        """
    )
    
    # Arguments globaux
    parser.add_argument(
        "--api-url",
        default=os.getenv("APPI_API_URL"),
        help="URL de l'API Appi"
    )
    parser.add_argument(
        "--api-key",
        default=os.getenv("APPI_API_KEY"),
        help="Cl√© API"
    )
    parser.add_argument(
        "--debug",
        action="store_true",
        help="Mode debug"
    )
    
    # Sous-commandes
    subparsers = parser.add_subparsers(dest="command", help="Commandes disponibles")
    
    # Commande stats
    stats_parser = subparsers.add_parser("stats", help="Afficher les statistiques")
    
    # Commande cas
    cas_parser = subparsers.add_parser("cas", help="R√©cup√©rer les cas de dengue")
    cas_parser.add_argument("--date-debut", help="Date de d√©but (YYYY-MM-DD)")
    cas_parser.add_argument("--date-fin", help="Date de fin (YYYY-MM-DD)")
    cas_parser.add_argument("--region", help="R√©gion")
    cas_parser.add_argument("--district", help="District")
    cas_parser.add_argument("--limit", type=int, default=10, help="Nombre maximum de cas")
    
    # Commande alertes
    alertes_parser = subparsers.add_parser("alertes", help="G√©rer les alertes")
    alertes_parser.add_argument("--severity", choices=["warning", "critical", "info"], help="S√©v√©rit√©")
    alertes_parser.add_argument("--status", choices=["active", "resolved"], help="Statut")
    alertes_parser.add_argument("--limit", type=int, default=10, help="Nombre maximum d'alertes")
    
    # Commande export
    export_parser = subparsers.add_parser("export", help="Exporter les donn√©es")
    export_parser.add_argument("--format", choices=["csv", "json", "excel"], default="csv", help="Format d'export")
    export_parser.add_argument("--filepath", help="Chemin du fichier de sortie")
    export_parser.add_argument("--output", help="Fichier de sortie (alias pour filepath)")
    export_parser.add_argument("--date-debut", help="Date de d√©but (YYYY-MM-DD)")
    export_parser.add_argument("--date-fin", help="Date de fin (YYYY-MM-DD)")
    export_parser.add_argument("--region", help="R√©gion")
    export_parser.add_argument("--district", help="District")
    
    # Commande auth
    auth_parser = subparsers.add_parser("auth", help="Authentification")
    auth_parser.add_argument("--email", required=True, help="Email")
    auth_parser.add_argument("--password", required=True, help="Mot de passe")
    
    # Commande regions
    regions_parser = subparsers.add_parser("regions", help="Lister les r√©gions")
    
    # Commande districts
    districts_parser = subparsers.add_parser("districts", help="Lister les districts")
    districts_parser.add_argument("--region", help="R√©gion")
    
    # Commande resumer (nouvelle)
    resumer_parser = subparsers.add_parser("resumer", help="R√©sum√© statistique et structurel")
    resumer_parser.add_argument("--annee", type=int, help="Ann√©e")
    resumer_parser.add_argument("--region", help="R√©gion")
    resumer_parser.add_argument("--district", help="District")
    resumer_parser.add_argument("--date-debut", help="Date de d√©but (YYYY-MM-DD)")
    resumer_parser.add_argument("--date-fin", help="Date de fin (YYYY-MM-DD)")
    resumer_parser.add_argument("--detail", action="store_true", help="Afficher les d√©tails")
    resumer_parser.add_argument("--max-lignes", type=int, default=10, help="Nombre maximum de lignes")
    
    # Commande graph_desc (nouvelle)
    graph_desc_parser = subparsers.add_parser("graph_desc", help="Visualisation descriptive")
    graph_desc_parser.add_argument("--annee", type=int, help="Ann√©e")
    graph_desc_parser.add_argument("--region", help="R√©gion")
    graph_desc_parser.add_argument("--district", help="District")
    graph_desc_parser.add_argument("--date-debut", help="Date de d√©but (YYYY-MM-DD)")
    graph_desc_parser.add_argument("--date-fin", help="Date de fin (YYYY-MM-DD)")
    graph_desc_parser.add_argument("--save-dir", help="Dossier de sauvegarde des graphiques")
    graph_desc_parser.add_argument("--max-modalites", type=int, default=10, help="Nombre maximum de modalit√©s")
    graph_desc_parser.add_argument("--boxplot-age", action="store_true", help="Afficher boxplot pour l'√¢ge")
    
    # Commande evolution (nouvelle)
    evolution_parser = subparsers.add_parser("evolution", help="Analyse temporelle")
    evolution_parser.add_argument("--by", help="Variable de sous-groupe (sexe, region, district, etc.)")
    evolution_parser.add_argument("--frequence", choices=["W", "M"], default="W", help="Fr√©quence (W=semaine, M=mois)")
    evolution_parser.add_argument("--taux-croissance", action="store_true", help="Calculer les taux de croissance")
    evolution_parser.add_argument("--max-graph", type=int, default=6, help="Nombre maximum de graphiques")
    evolution_parser.add_argument("--annee", type=int, help="Ann√©e")
    evolution_parser.add_argument("--region", help="R√©gion")
    evolution_parser.add_argument("--district", help="District")
    evolution_parser.add_argument("--date-debut", help="Date de d√©but (YYYY-MM-DD)")
    evolution_parser.add_argument("--date-fin", help="Date de fin (YYYY-MM-DD)")
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        sys.exit(1)
    
    # Initialiser le client
    if not args.api_url:
        print("‚ùå Erreur: URL de l'API requise (--api-url ou APPI_API_URL)")
        sys.exit(1)
    
    try:
        client = AppiClient(
            base_url=args.api_url,
            api_key=args.api_key,
            debug=args.debug
        )
        
        # Ex√©cuter la commande
        if args.command == "stats":
            handle_stats(client)
        elif args.command == "cas":
            handle_cas(client, args)
        elif args.command == "alertes":
            handle_alertes(client, args)
        elif args.command == "export":
            handle_export(client, args)
        elif args.command == "auth":
            handle_auth(client, args)
        elif args.command == "regions":
            handle_regions(client)
        elif args.command == "districts":
            handle_districts(client, args)
        elif args.command == "resumer":
            handle_resumer(client, args)
        elif args.command == "graph_desc":
            handle_graph_desc(client, args)
        elif args.command == "evolution":
            handle_evolution(client, args)
        else:
            print(f"‚ùå Commande inconnue: {args.command}")
            sys.exit(1)
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        if args.debug:
            import traceback
            traceback.print_exc()
        sys.exit(1)


def handle_stats(client):
    """G√©rer la commande stats."""
    print("üìä R√©cup√©ration des statistiques...")
    
    try:
        stats = client.get_stats()
        print(f"\nüìà Statistiques g√©n√©rales:")
        print(f"   Total cas: {stats.total_cas:,}")
        print(f"   Cas positifs: {stats.total_positifs:,}")
        print(f"   Hospitalisations: {stats.total_hospitalisations:,}")
        print(f"   D√©c√®s: {stats.total_deces:,}")
        print(f"   R√©gions actives: {len(stats.regions_actives)}")
        print(f"   Districts actifs: {len(stats.districts_actifs)}")
        print(f"   Derni√®re mise √† jour: {stats.derniere_mise_a_jour}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des statistiques: {e}")


def handle_cas(client, args):
    """G√©rer la commande cas."""
    print("ü¶ü R√©cup√©ration des cas de dengue...")
    
    try:
        cas = client.get_cas_dengue(
            annee=2024,
            mois=1,
            region=args.region
        )
        
        print(f"\nüìã Cas r√©cup√©r√©s: {len(cas)}")
        
        if not cas.empty:
            # DEBUG: Afficher le type et le contenu des 3 premi√®res lignes
            print("[DEBUG] Types des premi√®res lignes:")
            for i, (_, row) in enumerate(cas.head(3).iterrows(), 1):
                print(f"  Row {i}: type={type(row)}, value={row}")
            # Afficher les 5 premiers cas
            for i, (_, row) in enumerate(cas.head(5).iterrows(), 1):
                if not isinstance(row, pd.Series):
                    print(f"[DEBUG] Ligne inattendue ignor√©e: type(row)={type(row)}, value={row}")
                    continue
                date_consultation = row.get('date_consultation', 'N/A')
                region = row.get('region', 'N/A')
                sexe = row.get('sexe', 'N/A')
                age = row.get('age', 'N/A')
                print(f"   {i}. {date_consultation} - {region} - {sexe} ({age} ans)")
                resultat_test = row.get('resultat_test')
                if resultat_test and pd.notna(resultat_test):
                    print(f"      Test: {resultat_test}")
                hospitalise = row.get('hospitalise')
                if hospitalise and pd.notna(hospitalise):
                    print(f"      Hospitalis√©: {hospitalise}")
            if len(cas) > 5:
                print(f"   ... et {len(cas) - 5} autres cas")
        else:
            print("   Aucun cas trouv√©")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des cas: {e}")


def handle_alertes(client, args):
    """G√©rer la commande alertes."""
    print("üö® R√©cup√©ration des alertes...")
    
    try:
        alertes = client.get_alertes(
            limit=args.limit,
            severity=args.severity,
            status=args.status
        )
        
        print(f"\nüì¢ Alertes r√©cup√©r√©es: {len(alertes)}")
        
        for i, a in enumerate(alertes.iterrows(), 1):
            _, row = a
            print(f"   {i}. [{row.get('severity', 'N/A')}] {row.get('message', 'N/A')}")
            print(f"      R√©gion: {row.get('region', 'N/A')}")
            print(f"      Statut: {row.get('status', 'N/A')}")
            print(f"      Date: {row.get('created_at', 'N/A')}")
            print()
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des alertes: {e}")


def handle_export(client, args):
    """G√©rer la commande export."""
    print(f"üíæ Export des donn√©es au format {args.format}...")
    
    # D√©terminer le chemin du fichier
    filepath = args.filepath or args.output
    
    try:
        if filepath:
            # Cr√©er le r√©pertoire parent si n√©cessaire
            import os
            dir_path = os.path.dirname(filepath)
            if dir_path and not os.path.exists(dir_path):
                os.makedirs(dir_path, exist_ok=True)
                print(f"üìÅ R√©pertoire cr√©√©: {dir_path}")
            
            # Export vers fichier
            success = client.save_to_file(
                filepath=filepath,
                format=args.format,
                date_debut=args.date_debut,
                date_fin=args.date_fin,
                region=args.region,
                district=args.district
            )
            
            if success:
                print(f"‚úÖ Donn√©es export√©es dans '{filepath}'")
            else:
                print(f"‚ùå Erreur lors de l'export vers '{filepath}'")
        else:
            # Export vers stdout (pour les formats texte)
            if args.format in ["csv", "json"]:
                data = client.exporter.export_data(
                    format=args.format,
                    date_debut=args.date_debut,
                    date_fin=args.date_fin,
                    region=args.region,
                    district=args.district
                )
                
                if args.format == "json":
                    import json
                    print(json.dumps(json.loads(data.decode()), indent=2))
                else:
                    print(data.decode())
            else:
                print("‚ùå Le format Excel n√©cessite un fichier de sortie (--filepath)")
                
    except Exception as e:
        print(f"‚ùå Erreur lors de l'export: {e}")


def handle_auth(client, args):
    """G√©rer la commande auth."""
    print("üîê Authentification...")
    
    try:
        result = client.authenticate(args.email, args.password)
        print(f"‚úÖ Authentification r√©ussie pour {args.email}")
        print(f"   Token: {result.get('access_token', 'N/A')[:20]}...")
        
    except Exception as e:
        print(f"‚ùå Erreur d'authentification: {e}")


def handle_regions(client):
    """G√©rer la commande regions."""
    print("üèõÔ∏è R√©cup√©ration des r√©gions...")
    
    try:
        regions = client.get_regions()
        print(f"\nüìã R√©gions disponibles ({len(regions)}):")
        
        for i, region in enumerate(regions, 1):
            print(f"   {i}. {region}")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des r√©gions: {e}")


def handle_districts(client, args):
    """G√©rer la commande districts."""
    print("üó∫Ô∏è R√©cup√©ration des districts...")
    
    try:
        districts = client.get_districts(region=args.region)
        
        print(f"\nüìç Districts r√©cup√©r√©s: {len(districts)}")
        
        for district in districts:
            print(f"   ‚Ä¢ {district}")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des districts: {e}")


def handle_resumer(client, args):
    """G√©rer la commande resumer."""
    print("üìä G√©n√©ration du r√©sum√© statistique et structurel...")
    
    try:
        # Pr√©parer les param√®tres
        params = {}
        if args.annee:
            params['annee'] = args.annee
        if args.region:
            params['region'] = args.region
        if args.district:
            params['district'] = args.district
        if args.date_debut:
            params['date_debut'] = args.date_debut
        if args.date_fin:
            params['date_fin'] = args.date_fin
        if args.detail:
            params['detail'] = args.detail
        if args.max_lignes:
            params['max_lignes'] = args.max_lignes
        
        # Appeler la m√©thode resumer
        client.resumer(**params)
        
        print("‚úÖ R√©sum√© g√©n√©r√© avec succ√®s")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration du r√©sum√©: {e}")


def handle_graph_desc(client, args):
    """G√©rer la commande graph_desc."""
    print("üìà G√©n√©ration des graphiques descriptifs...")
    
    try:
        # Pr√©parer les param√®tres
        params = {}
        if args.annee:
            params['annee'] = args.annee
        if args.region:
            params['region'] = args.region
        if args.district:
            params['district'] = args.district
        if args.date_debut:
            params['date_debut'] = args.date_debut
        if args.date_fin:
            params['date_fin'] = args.date_fin
        if args.save_dir:
            params['save_dir'] = args.save_dir
        if args.max_modalites:
            params['max_modalites'] = args.max_modalites
        if args.boxplot_age:
            params['boxplot_age'] = args.boxplot_age
        
        # Appeler la m√©thode graph_desc
        client.graph_desc(**params)
        
        print("‚úÖ Graphiques descriptifs g√©n√©r√©s avec succ√®s")
        if args.save_dir:
            print(f"üìÅ Graphiques sauvegard√©s dans: {args.save_dir}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration des graphiques: {e}")


def handle_evolution(client, args):
    """G√©rer la commande evolution."""
    print("üìà G√©n√©ration de l'analyse temporelle...")
    
    try:
        # Pr√©parer les param√®tres
        params = {}
        if args.by:
            params['by'] = args.by
        if args.frequence:
            params['frequence'] = args.frequence
        if args.taux_croissance:
            params['taux_croissance'] = args.taux_croissance
        if args.max_graph:
            params['max_graph'] = args.max_graph
        if args.annee:
            params['annee'] = args.annee
        if args.region:
            params['region'] = args.region
        if args.district:
            params['district'] = args.district
        if args.date_debut:
            params['date_debut'] = args.date_debut
        if args.date_fin:
            params['date_fin'] = args.date_fin
        
        # Appeler la m√©thode evolution
        client.evolution(**params)
        
        print("‚úÖ Analyse temporelle g√©n√©r√©e avec succ√®s")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration de l'analyse temporelle: {e}")


if __name__ == "__main__":
    main() 